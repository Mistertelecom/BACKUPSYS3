import { Request, Response } from 'express';
import { configService } from '../services/ConfigService';

export class ConfigController {
  /**
   * Obt√©m configura√ß√µes p√∫blicas GitHub
   */
  static async getGitHubConfig(req: Request, res: Response): Promise<void> {
    try {
      const config = configService.getPublicConfig();
      
      res.json({
        success: true,
        config
      });
    } catch (error: any) {
      console.error('Erro ao obter configura√ß√µes GitHub:', error);
      res.status(500).json({
        success: false,
        error: 'Erro ao obter configura√ß√µes',
        message: error.message
      });
    }
  }

  /**
   * Configura token GitHub
   */
  static async setGitHubToken(req: Request, res: Response): Promise<void> {
    try {
      console.log('üîß ConfigController.setGitHubToken - In√≠cio');
      const { token, testConnection = true } = req.body;
      console.log('üîß Token recebido:', token ? `${token.substring(0, 8)}...` : 'null');

      if (!token || typeof token !== 'string') {
        console.log('‚ùå Token inv√°lido ou vazio');
        res.status(400).json({
          success: false,
          error: 'Token √© obrigat√≥rio'
        });
        return;
      }

      // Remover espa√ßos em branco
      const cleanToken = token.trim();
      console.log('üîß Token limpo:', `${cleanToken.substring(0, 8)}...`);

      // Valida√ß√£o b√°sica do formato
      if (!cleanToken.startsWith('ghp_') && !cleanToken.startsWith('github_pat_')) {
        console.log('‚ùå Formato de token inv√°lido');
        res.status(400).json({
          success: false,
          error: 'Formato de token GitHub inv√°lido. Use tokens que come√ßam com ghp_ ou github_pat_'
        });
        return;
      }

      // Salvar token (ser√° criptografado automaticamente)
      console.log('üíæ Salvando token...');
      configService.setGitHubToken(cleanToken);
      console.log('‚úÖ Token salvo com sucesso');

      // Testar conex√£o se solicitado
      let connectionTest = null;
      if (testConnection) {
        console.log('üîç Testando conex√£o GitHub...');
        connectionTest = await configService.testGitHubConnection();
        console.log('üîç Resultado do teste:', connectionTest);
        
        if (!connectionTest.success) {
          console.log('‚ùå Teste de conex√£o falhou, removendo token');
          // Remover token se a conex√£o falhou
          configService.removeGitHubToken();
          
          res.status(400).json({
            success: false,
            error: 'Token inv√°lido',
            message: connectionTest.message
          });
          return;
        }
      }

      const config = configService.getPublicConfig();
      console.log('‚úÖ Configura√ß√£o finalizada:', {
        hasToken: config.hasToken,
        maskedToken: config.maskedToken
      });

      res.json({
        success: true,
        message: 'Token GitHub configurado com sucesso',
        config,
        connectionTest
      });
    } catch (error: any) {
      console.error('‚ùå Erro ao configurar token GitHub:', error);
      res.status(500).json({
        success: false,
        error: 'Erro ao configurar token',
        message: error.message
      });
    }
  }

  /**
   * Configura reposit√≥rio GitHub
   */
  static async setGitHubRepo(req: Request, res: Response): Promise<void> {
    try {
      const { owner, repo } = req.body;

      if (!owner || !repo) {
        res.status(400).json({
          success: false,
          error: 'Owner e repo s√£o obrigat√≥rios'
        });
        return;
      }

      // Valida√ß√£o b√°sica
      if (!/^[a-zA-Z0-9_.-]+$/.test(owner) || !/^[a-zA-Z0-9_.-]+$/.test(repo)) {
        res.status(400).json({
          success: false,
          error: 'Owner e repo devem conter apenas letras, n√∫meros, h√≠fens, pontos e underscores'
        });
        return;
      }

      configService.setGitHubRepo(owner, repo);
      const config = configService.getPublicConfig();

      res.json({
        success: true,
        message: 'Reposit√≥rio GitHub configurado com sucesso',
        config
      });
    } catch (error: any) {
      console.error('Erro ao configurar reposit√≥rio GitHub:', error);
      res.status(500).json({
        success: false,
        error: 'Erro ao configurar reposit√≥rio',
        message: error.message
      });
    }
  }

  /**
   * Testa conex√£o GitHub
   */
  static async testGitHubConnection(req: Request, res: Response): Promise<void> {
    try {
      const result = await configService.testGitHubConnection();
      
      if (result.success) {
        res.json({
          success: true,
          message: result.message,
          rateLimitRemaining: result.rateLimitRemaining
        });
      } else {
        res.status(400).json({
          success: false,
          error: 'Falha na conex√£o',
          message: result.message
        });
      }
    } catch (error: any) {
      console.error('Erro ao testar conex√£o GitHub:', error);
      res.status(500).json({
        success: false,
        error: 'Erro ao testar conex√£o',
        message: error.message
      });
    }
  }

  /**
   * Remove token GitHub
   */
  static async removeGitHubToken(req: Request, res: Response): Promise<void> {
    try {
      configService.removeGitHubToken();
      const config = configService.getPublicConfig();

      res.json({
        success: true,
        message: 'Token GitHub removido com sucesso',
        config
      });
    } catch (error: any) {
      console.error('Erro ao remover token GitHub:', error);
      res.status(500).json({
        success: false,
        error: 'Erro ao remover token',
        message: error.message
      });
    }
  }

  /**
   * Obt√©m status de configura√ß√£o do GitHub
   */
  static async getGitHubStatus(req: Request, res: Response): Promise<void> {
    try {
      const config = configService.getPublicConfig();
      let connectionStatus = null;

      if (config.hasToken) {
        connectionStatus = await configService.testGitHubConnection();
      }

      res.json({
        success: true,
        config,
        connectionStatus,
        isConfigured: config.hasToken,
        isConnected: connectionStatus?.success || false
      });
    } catch (error: any) {
      console.error('Erro ao obter status GitHub:', error);
      res.status(500).json({
        success: false,
        error: 'Erro ao obter status',
        message: error.message
      });
    }
  }
}